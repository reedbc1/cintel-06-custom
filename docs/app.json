[{"name": "app.py", "content": "\nfrom shiny import reactive, render, req\nfrom shiny.express import input, ui\nfrom shinywidgets import render_plotly\nimport pandas as pd\nimport plotly.graph_objects as go\n\ndf = pd.read_csv('/nvidia_stock_prices.csv')\n\n# sidebar\nui.page_opts(title=\"Nvidia Stock Prices\", fillable=True)\n\nwith ui.sidebar():\n    ui.p(\"App selects data for Nvidia stock from the last 5 years.\")\n\n    start_date = df['Date'].min()\n    end_date = df['Date'].max()\n\n    ui.input_date_range(\"daterange\", \"Select dates\", start = start_date, end = end_date)\n\n    # checkbox group\n        # choose analysis (bollinger bands, etc)\n    # links to project info\n\n# main dashboard\nwith ui.navset_pill(id=\"tab\"):  \n\n    with ui.nav_panel(\"Data grid\"):\n        with ui.card(full_screen=True):\n            @render.data_frame  \n            def nvidia_df():\n                return render.DataGrid(filtered_data())\n\n    with ui.nav_panel(\"Stock chart\"):\n\n        with ui.layout_columns():\n\n            with ui.card():\n                ui.card_header(\"Highest Price\")\n                @render.text\n                def get_highest_price():\n                    df = filtered_data()\n                    highest_price = round(df[\"High\"].max(), 2)\n                    return f\"{highest_price}\"\n                    \n            with ui.card():\n                ui.card_header(\"Lowest Price\")\n                @render.text\n                def get_lowest_price():\n                    df = filtered_data()\n                    lowest_price = round(df[\"Low\"].min(), 2)\n                    return f\"{lowest_price}\"\n\n            with ui.card():\n                ui.card_header(\"% Change\")\n                @render.text\n                def get_pct_change():\n                    df = filtered_data()\n                    high = round(df[\"High\"].max(), 2)\n                    low = round(df[\"Low\"].min(), 2)\n                    pct_change = round(((high - low) / low) * 100, 2)\n                    return f\"{pct_change}%\"\n\n        with ui.card(full_screen=True):\n            @render_plotly\n            def candlestick_graph():\n                df = filtered_data()\n                fig = go.Figure(data=[go.Candlestick(x=df['Date'],\n                            open=df['Open'], high=df['High'],\n                            low=df['Low'], close=df['Close'])\n                                ])\n\n                fig.update_layout(xaxis_rangeslider_visible=False)\n                return fig\n\n# reactive calc\n@reactive.calc\ndef filtered_data():\n    req(input.daterange())\n    \n    # convert string to datetime\n    dates_series = df[\"Date\"] \n    dates_series = pd.to_datetime(dates_series)\n\n    # define start and end date\n    start_date = pd.to_datetime(input.daterange()[0])\n    end_date = pd.to_datetime(input.daterange()[1])\n\n    # Check if dates fall within the range\n    filtered_df = df[(dates_series >= start_date) & (dates_series <= end_date)]\n\n    return filtered_df\n\n", "type": "text"}]