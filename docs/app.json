[{"name": "app.py", "content": "import pandas as pd\nimport plotly.graph_objects as go\nimport yfinance as yf\nfrom shiny import reactive, render, req\nfrom shiny.express import input, ui\nfrom shinywidgets import render_plotly\nfrom faicons import icon_svg\n\n\n# getting icons for value cards\n# From https://icons.getbootstrap.com/icons/piggy-bank/\narrow_down = ui.HTML(\n    '<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 384 512\"><!--!Font Awesome Free 6.5.2 by @fontawesome - https://fontawesome.com License - https://fontawesome.com/license/free Copyright 2024 Fonticons, Inc.--><path fill=\"#3c5faa\" d=\"M169.4 470.6c12.5 12.5 32.8 12.5 45.3 0l160-160c12.5-12.5 12.5-32.8 0-45.3s-32.8-12.5-45.3 0L224 370.8 224 64c0-17.7-14.3-32-32-32s-32 14.3-32 32l0 306.7L54.6 265.4c-12.5-12.5-32.8-12.5-45.3 0s-12.5 32.8 0 45.3l160 160z\"/></svg>'\n)\narrow_up = ui.HTML(\n    '<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 384 512\"><!--!Font Awesome Free 6.5.2 by @fontawesome - https://fontawesome.com License - https://fontawesome.com/license/free Copyright 2024 Fonticons, Inc.--><path fill=\"#3c5faa\" d=\"M214.6 41.4c-12.5-12.5-32.8-12.5-45.3 0l-160 160c-12.5 12.5-12.5 32.8 0 45.3s32.8 12.5 45.3 0L160 141.2V448c0 17.7 14.3 32 32 32s32-14.3 32-32V141.2L329.4 246.6c12.5 12.5 32.8 12.5 45.3 0s12.5-32.8 0-45.3l-160-160z\"/></svg>'\n)\n\n### Getting Nvidia finance data\n# Ticker symbol for Nvidia\nticker_symbol = \"NVDA\"\n\n# Start date (5 years ago from today)\nstart_date = pd.Timestamp.now() - pd.DateOffset(years=5)\n\n# End date (today)\nend_date = pd.Timestamp.now()\n\n# Fetching stock data from Yahoo Finance\ndf = yf.download(ticker_symbol, start=start_date, end=end_date)\n\n# reset index so that date is also a column\ndf.reset_index(inplace=True)\n\n# change items in date column to strings\ndf['Date'] = df['Date'].astype(str)\n\n# sidebar\nui.page_opts(title=\"Nvidia Stock Prices\", fillable=True)\n\nwith ui.sidebar():\n    ui.p(\"App selects data for Nvidia stock from the last 5 years.\")\n\n    start_date = df['Date'].min()\n    end_date = df['Date'].max()\n\n    ui.input_date_range(\"daterange\", \"Select dates\", start = start_date, end = end_date)\n\n# main dashboard\nwith ui.navset_pill(id=\"tab\"):  \n\n    with ui.nav_panel(\"Data grid\"):\n        with ui.card(full_screen=True):\n            @render.data_frame  \n            def nvidia_df():\n                return render.DataGrid(filtered_data())\n\n    with ui.nav_panel(\"Stock chart\"):\n\n        with ui.layout_column_wrap(fill=False):\n            \n            \n\n            with ui.value_box(showcase = arrow_up):\n                \"Highest Price\"\n                \n                @render.ui\n                def get_highest_price():\n                    df = filtered_data()\n                    highest_price = round(df[\"High\"].max(), 2)\n                    return f\"{highest_price}\"\n                \n            with ui.value_box(showcase = arrow_down):\n                \"Lowest Price\"\n\n                @render.text\n                def get_lowest_price():\n                    df = filtered_data()\n                    lowest_price = round(df[\"Low\"].min(), 2)\n                    return f\"{lowest_price}\"\n\n            with ui.value_box(showcase=icon_svg(\"percent\")):\n                \"Percent Change\"\n\n                @render.text\n                def get_pct_change():\n                    df = filtered_data()\n                    high = round(df[\"High\"].max(), 2)\n                    low = round(df[\"Low\"].min(), 2)\n                    pct_change = round(((high - low) / low) * 100, 2)\n                    return f\"{pct_change}%\"\n\n        with ui.card(full_screen=True):\n            @render_plotly\n            def candlestick_graph():\n                df = filtered_data()\n                fig = go.Figure(data=[go.Candlestick(x=df['Date'],\n                            open=df['Open'], high=df['High'],\n                            low=df['Low'], close=df['Close'])\n                                ])\n\n                fig.update_layout(xaxis_rangeslider_visible=False)\n                return fig\n\n# add area for latest data\n\n# reactive calc\n@reactive.calc\ndef filtered_data():\n    req(input.daterange())\n    \n    # convert string to datetime\n    dates_series = df[\"Date\"] \n    dates_series = pd.to_datetime(dates_series)\n\n    # define start and end date\n    start_date = pd.to_datetime(input.daterange()[0])\n    end_date = pd.to_datetime(input.daterange()[1])\n\n    # Check if dates fall within the range\n    filtered_df = df[(dates_series >= start_date) & (dates_series <= end_date)]\n\n    return filtered_df\n\n", "type": "text"}, {"name": "requirements.txt", "content": "shiny\nshinylive\npandas\npyarrow\nplotly\nscipy\nshinywidgets\nyfinance\nfaicons\n", "type": "text"}]